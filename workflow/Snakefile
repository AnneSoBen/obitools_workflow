__author__ = "Anne-Sophie Benoiston"
__email__ = "anne-sophie.benoiston@ird.fr"

"""
DESCRIPTION

This is a snakemake workflow that analyzes DNA metabarcoding data with the OBITools v1.2.11 and SUMACLUST.

"""

configfile: "../config/config.yaml"
report: "report/workflow.rst"


# GET FINAL OUTPUT(S)
def get_input_all():
	if config["tomerge"]:
		obioutput=config["resultsfolder"]+config["mergedfile"]+"/"+config["mergedfile"]+"_R1R2_good_demultiplexed_derepl_basicfilt_cl_agg.tab"
		clust_seq="report/docs/"+config["mergedfile"]+"_clust_seq_length.png"
	else:
		obioutput=expand("{folder}{run}/{run}_R1R2_good_demultiplexed_derepl_basicfilt_cl_agg.tab", run=config["fastqfiles"], folder=config["resultsfolder"])
		clust_seq=expand("report/docs/{run}_clust_seq_length.png", run=config["fastqfiles"])

	inputfiles=[obioutput,clust_seq]

	return inputfiles


rule all:
	input:
		get_input_all(),
		expand("report/docs/{run}_R1_fastqc/fastqc_report.html", run=config["fastqfiles"]),
		expand("report/docs/{run}_R2_fastqc/fastqc_report.html", run=config["fastqfiles"]),
		expand("report/docs/{run}_first_steps_seq_length.png", run=config["fastqfiles"]),
		expand("report/docs/{run}_count_seq1.tsv", run=config["fastqfiles"]),
		expand("report/docs/{run}_count_seq1.svg", run=config["fastqfiles"]),
		expand("report/docs/{run}_count_seq2.tsv", run=config["fastqfiles"]),
		expand("report/docs/{run}_count_seq2.svg", run=config["fastqfiles"])


# SPLIT FASTQ
checkpoint split_fastq:
	input:
		R1=config["resourcesfolder"]+"{run}/{run}_R1.fastq",
		R2=config["resourcesfolder"]+"{run}/{run}_R2.fastq"
	output:
		directory(config["resultsfolder"]+"{run}/splitted_fastq")
	params:
		folder=config["resultsfolder"]+"{run}/splitted_fastq",
		nfiles=config["split_fastq"]["nfiles"],
		R1=config["resultsfolder"]+"{run}/splitted_fastq/{run}_R1",
		R2=config["resultsfolder"]+"{run}/splitted_fastq/{run}_R2"
	conda:
		"envs/obi_env.yaml"
	shell:
		"""
		mkdir {params.folder}
		obidistribute -n {params.nfiles} -p {params.R1} {input.R1}
		obidistribute -n {params.nfiles} -p {params.R2} {input.R2}
		"""


# PAIRING
rule pairing:
	input:
		R1=config["resultsfolder"]+"{run}/splitted_fastq/{run}_R1_{n}.fastq",
		R2=config["resultsfolder"]+"{run}/splitted_fastq/{run}_R2_{n}.fastq"
	output:
		config["resultsfolder"]+"{run}/splitted_fastq/{run}_R1R2_{n}.fastq"
	conda:
		"envs/obi_env.yaml"
	shell:
		"""
		illuminapairedend -r {input.R2} {input.R1} > {output}
		"""


# AGGREGATE
def aggregate_R1R2(wildcards):
	checkpoint_output=checkpoints.split_fastq.get(**wildcards).output[0]
	file_names=expand(config["resultsfolder"]+"{{run}}/splitted_fastq/{{run}}_R1R2_{n}.fastq", n=glob_wildcards(os.path.join(checkpoint_output, "{run}_R1_{n}.fastq")).n)
	return file_names
	

# MERGE PAIRED FILES
rule merge_paired:
	input:
		aggregate_R1R2
	output:	
		config["resultsfolder"]+"{run}/{run}_R1R2.fastq"
	params:
		splittedfastq=config["resultsfolder"]+"{run}/splitted_fastq"
	shell:
		"""
		cat {input} > {output}
		# rm -r {params.splittedfastq}
		"""


# SPLIT GOOD/BAD ALIGNMENTS
rule alifilt:
	input:
		config["resultsfolder"]+"{run}/{run}_R1R2.fastq"
	output:
		good=config["resultsfolder"]+"{run}/{run}_R1R2_good.fastq",
		bad=config["resultsfolder"]+"{run}/{run}_R1R2_bad.fastq"
	params:
		minscore=config["alifilt"]["minscore"],
		prefix=config["resultsfolder"]+"{run}/{run}_R1R2_"
	log:
		"../log/split_ali_{run}.log"
	conda:
		"envs/obi_env.yaml"
	shell:
		"""
		obiannotate -S ali:'"good" if score>{params.minscore} else "bad"' {input} | obisplit -t ali -p {params.prefix} 2> {log}
		"""


# DEMULTIPLEXING
rule demultiplex:
	input:
		config["resultsfolder"]+"{run}/{run}_R1R2_good.fastq"
	output:
		demultiplexed=config["resultsfolder"]+"{run}/{run}_R1R2_good_demultiplexed.fasta",
		unassigned=config["resultsfolder"]+"{run}/{run}_R1R2_good_unassigned.fasta"
	params:
		ngs=config["resourcesfolder"]+"{run}/{run}_ngsfilter.tab"
	log:
		"../log/demultiplex_{run}.log"
	conda:
		"envs/obi_env.yaml"
	shell:
		"""
		obiannotate --without-progress-bar --sanger -S 'Avgqphred:-int(math.log10(sum(sequence.quality)/len(sequence))*10)' {input} | ngsfilter --fasta-output -t {params.ngs} -u {output.unassigned} > {output.demultiplexed} 2> {log}
		"""


if config["tomerge"]:
	# MERGE LIBRARIES
	rule merge_demultiplex:
		input:
			expand(config["resultsfolder"]+"{run}/{run}_R1R2_good_demultiplexed.fasta", run=config["fastqfiles"])
		output:
			config["resultsfolder"]+config["mergedfile"]+"/"+config["mergedfile"]+"_R1R2_good_demultiplexed.fasta"
		log:
			"../log/merge_demultiplex_"+config["mergedfile"]+".log"
		shell:
			"""
			cat {input} > {output} 2> {log}
			"""


if config["tomerge"]:
	folder_prefix=config["resultsfolder"]+config["mergedfile"]+"/"
	folder_prefix2=folder_prefix
	files_prefix=config["mergedfile"]
else:
	folder_prefix=config["resultsfolder"]+"{run}/"
	folder_prefix2=config["resultsfolder"]+"{{run}}/"
	files_prefix="{run}"


# SPLIT FASTA FILES TO SPEED UP DEREPLICATION
checkpoint split_fasta:
	input:
		folder_prefix+files_prefix+"_R1R2_good_demultiplexed.fasta"
	output:
		directory(folder_prefix+"derepl_tmp")
	params:
		folder=folder_prefix+"derepl_tmp",
		nfiles=config["split_fasta"]["nfiles"],
		tmp=folder_prefix+"derepl_tmp/tmp"
	conda:
		"envs/obi_env.yaml"
	shell:
		"""
		mkdir {params.folder}
		obiannotate -S start:"hash(str(sequence))%{params.nfiles}" {input} | obisplit -t start -p {params.tmp}
		"""


# DEREPLICATION
rule derepl:
	input:
		folder_prefix+"derepl_tmp/tmp{t}.fasta"
	output:
		folder_prefix+"uniq/tmp_uniq{t}.fasta"
	conda:
		"envs/obi_env.yaml"
	shell:
		"""
		obiuniq -m sample {input} > {output}
		"""


# AGGREGATE
def aggregate_derepl(wildcards):
        checkpoint_output=checkpoints.split_fasta.get(**wildcards).output[0]
        file_names=expand(folder_prefix2+"uniq/tmp_uniq{t}.fasta", t=glob_wildcards(os.path.join(checkpoint_output, "tmp{t}.fasta")).t)
        return file_names


# MERGE DEREPLICATED FILES
rule merge_derepl:
	input:
		aggregate_derepl
	output:
		folder_prefix+files_prefix+"_R1R2_good_demultiplexed_derepl.fasta"
	params:
              	derepl=folder_prefix+"derepl_tmp",
		uniq=folder_prefix+"uniq"
	log:
		"../log/merge_derepl_"+files_prefix+".log"
	shell:
		"""
		cat {input} > {output} 2> {log}
		# rm -r {params.derepl} {params.uniq}
		"""


# BASIC FILTRATION
rule basicfilt:
	input:
		folder_prefix+files_prefix+"_R1R2_good_demultiplexed_derepl.fasta"
	output:
		folder_prefix+files_prefix+"_R1R2_good_demultiplexed_derepl_basicfilt.fasta"
	params:
		minlength=config["basicfilt"]["minlength"],
		mincount=config["basicfilt"]["mincount"]
	log:
		"../log/basicfilt_"+files_prefix+".log"
	conda:
		"envs/obi_env.yaml"
	shell:
		"""
		obiannotate --length -S 'GC_content:len(str(sequence).replace("a","").replace("t",""))*100/len(sequence)' {input} | obigrep -l {params.minlength} -s '^[acgt]+$' -p 'count>{params.mincount}' > {output} 2> {log}
		"""


# CLUSTERING
rule clustering:
	input:
		folder_prefix+files_prefix+"_R1R2_good_demultiplexed_derepl_basicfilt.fasta"
	output:
		folder_prefix+files_prefix+"_R1R2_good_demultiplexed_derepl_basicfilt_cl.fasta"
	params:
		minsim=config["clustering"]["minsim"]
	log:
		"../log/clustering_"+files_prefix+".log"
	threads: 8
	conda:
		"envs/suma_env.yaml"
	shell:
		"""
		sumaclust -t {params.minsim} -p {threads} {input} > {output}
		"""


# MERGE CLUSTERS
rule merge_clust:
	input:
		folder_prefix+files_prefix+"_R1R2_good_demultiplexed_derepl_basicfilt_cl.fasta"
	output:
		folder_prefix+files_prefix+"_R1R2_good_demultiplexed_derepl_basicfilt_cl_agg.fasta"
	log:
		"../log/merge_clust_"+files_prefix+".log"
	conda:
		"envs/obi_env.yaml"
	shell:
		"""
		obiselect -c cluster -n 1 --merge sample -M -f count {input} > {output} 2> {log}
		"""


# TAB FORMATTING
rule tab_format:
	input:
		folder_prefix+files_prefix+"_R1R2_good_demultiplexed_derepl_basicfilt_cl_agg.fasta"
	output:
		folder_prefix+files_prefix+"_R1R2_good_demultiplexed_derepl_basicfilt_cl_agg.tab"
	log:
		"../log/tab_format_"+files_prefix+".log"
	conda:
		"envs/obi_env.yaml"
	shell:
		"""
		obitab -n NA -d -o {input} > {output} 2> {log}
		"""

# REPORT RULES

# PLOT DISTRIBUTION OF READS QUALITY
rule fastqc:
	input:
		R1=config["resourcesfolder"]+"{run}/{run}_R1.fastq",
		R2=config["resourcesfolder"]+"{run}/{run}_R2.fastq"
	output:
		R1=report("report/docs/{run}_R1_fastqc/fastqc_report.html", caption="report/plot_fastqc.rst", category="Quality"),
		R2=report("report/docs/{run}_R2_fastqc/fastqc_report.html", caption="report/plot_fastqc.rst", category="Quality")
	conda:
		"envs/fastqc.yaml"
	shell:
		"""
		fastqc {input.R1} --extract -o report/docs/
		fastqc {input.R2} --extract -o report/docs/
		"""

# PLOT SEQUENCES LENGTH
rule plot_seq_length1:
	input:
		ps=config["resultsfolder"]+"{run}/{run}_R1R2.fastq",
		afs=config["resultsfolder"]+"{run}/{run}_R1R2_good.fastq",
		ds=config["resultsfolder"]+"{run}/{run}_R1R2_good_demultiplexed.fasta"
	output:
		sl=report("report/docs/{run}_first_steps_seq_length.png", caption="report/plot_first_steps_seq_length.rst", category="Sequence length")
	conda:
		"envs/stats.yaml"
	script:
		"scripts/plot_seq_length.py"


# PLOT SEQUENCES LENGTH
rule plot_seq_length2:
	input:
		cs=folder_prefix+files_prefix+"_R1R2_good_demultiplexed_derepl_basicfilt_cl_agg.fasta"
	output:
		csl=report("report/docs/"+files_prefix+"_clust_seq_length.png", caption="report/plot_clust_seq_length.rst", category="Sequence length")
	conda:
		"envs/stats.yaml"
	script:
		"scripts/plot_seq_length2.py"


# COUNT SEQUENCES
rule count_seq:
	input:
		R1=config["resourcesfolder"]+"{run}/{run}_R1.fastq",
		R2=config["resourcesfolder"]+"{run}/{run}_R2.fastq",
		R1R2=config["resultsfolder"]+"{run}/{run}_R1R2.fastq",
		good=config["resultsfolder"]+"{run}/{run}_R1R2_good.fastq",
		bad=config["resultsfolder"]+"{run}/{run}_R1R2_bad.fastq",
		demult=config["resultsfolder"]+"{run}/{run}_R1R2_good_demultiplexed.fasta",
		unass=config["resultsfolder"]+"{run}/{run}_R1R2_good_unassigned.fasta",
		derepl=folder_prefix+files_prefix+"_R1R2_good_demultiplexed_derepl.fasta",
		filt=folder_prefix+files_prefix+"_R1R2_good_demultiplexed_derepl_basicfilt.fasta",
		clust=folder_prefix+files_prefix+"_R1R2_good_demultiplexed_derepl_basicfilt_cl_agg.fasta"
	output:
		tab1=report("report/docs/{run}_count_seq1.tsv", category="Counts"),
		svg1=report("report/docs/{run}_count_seq1.svg", category="Counts"),
		tab2=report("report/docs/{run}_count_seq2.tsv", category="Counts"),
		svg2=report("report/docs/{run}_count_seq2.svg", category="Counts")
	conda:
		"envs/stats.yaml"
	script:
		"scripts/count_seq.py"
